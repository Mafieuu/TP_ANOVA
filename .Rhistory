---
title: "analyse-R"
# Suppression des fichiers HTML
#unlink("graphs/", recursive = TRUE)
for (f in  list.files(pattern = "html$"))
unlink(f)
# Vérification des dépendances
source("verification_installation_dependances.R")
# Recréer tous les chapitres
chapitres <- list.files(pattern = "Rmd$")
for (f in chapitres) {
set.seed(100);
rmarkdown::render(f, envir = new.env())
}
# Générer le PDF
source("make_pdf.R")
# Suppression des fichiers HTML
#unlink("graphs/", recursive = TRUE)
for (f in  list.files(pattern = "html$"))
unlink(f)
# Vérification des dépendances
source("verification_installation_dependances.R")
# Recréer tous les chapitres
chapitres <- list.files(pattern = "Rmd$")
for (f in chapitres) {
set.seed(100);
rmarkdown::render(f, envir = new.env())
}
# Générer le PDF
source("make_pdf.R")
require(xml2)
require(stringr)
## Page d'accueil
index <- read_html("index.html", encoding = "UTF-8")
res <- as.character(xml_find_first(index, ".//article"))
## Identifier les chapitres
divs <- xml_find_all(index, ".//div")
for (div in divs)
if (!is.na(xml_attr(div, 'id')))
if (xml_attr(div, 'id') == 'tdm')
tdm <- div
chapitres <- unique(xml_attr(xml_find_all(tdm, ".//a"), 'href'))
chapitres <- chapitres[str_starts(chapitres, "#", negate = TRUE)]
## Récupérer le contenu de chaque chapitre
for (chap in chapitres) {
page <- read_html(chap, encoding = "UTF-8")
contenu <- as.character(xml_find_first(page, ".//article"))
rac <- str_sub(chap, 1, -6)
contenu <- str_replace_all(contenu, 'id="TOC', 'class="TOC')
contenu <- str_replace_all(contenu, 'id="', paste0('id="', rac, "_"))
contenu <- str_replace_all(contenu, 'href="#', paste0('href="#', rac, "_"))
contenu <- str_replace_all(contenu, '<article>', paste0('<article id="', rac, '">'))
res <- paste(res, contenu, sep="\n")
}
# Suppression des fichiers HTML
#unlink("graphs/", recursive = TRUE)
for (f in  list.files(pattern = "html$"))
unlink(f)
# Vérification des dépendances
source("verification_installation_dependances.R")
# Recréer tous les chapitres
chapitres <- list.files(pattern = "Rmd$")
for (f in chapitres) {
set.seed(100);
rmarkdown::render(f, envir = new.env())
}
# Générer le PDF
source("make_pdf.R")
require(xml2)
require(stringr)
## Page d'accueil
index <- read_html("index.html", encoding = "UTF-8")
res <- as.character(xml_find_first(index, ".//article"))
## Identifier les chapitres
divs <- xml_find_all(index, ".//div")
for (div in divs)
if (!is.na(xml_attr(div, 'id')))
if (xml_attr(div, 'id') == 'tdm')
tdm <- div
chapitres <- unique(xml_attr(xml_find_all(tdm, ".//a"), 'href'))
chapitres <- chapitres[str_starts(chapitres, "#", negate = TRUE)]
## Récupérer le contenu de chaque chapitre
for (chap in chapitres) {
page <- read_html(chap, encoding = "UTF-8")
contenu <- as.character(xml_find_first(page, ".//article"))
rac <- str_sub(chap, 1, -6)
contenu <- str_replace_all(contenu, 'id="TOC', 'class="TOC')
contenu <- str_replace_all(contenu, 'id="', paste0('id="', rac, "_"))
contenu <- str_replace_all(contenu, 'href="#', paste0('href="#', rac, "_"))
contenu <- str_replace_all(contenu, '<article>', paste0('<article id="', rac, '">'))
res <- paste(res, contenu, sep="\n")
}
require(xml2)
require(stringr)
## Page d'accueil
index <- read_html("index.html", encoding = "UTF-8")
res <- as.character(xml_find_first(index, ".//article"))
## Identifier les chapitres
divs <- xml_find_all(index, ".//div")
for (div in divs)
if (!is.na(xml_attr(div, 'id')))
if (xml_attr(div, 'id') == 'tdm')
tdm <- div
chapitres <- unique(xml_attr(xml_find_all(tdm, ".//a"), 'href'))
chapitres <- chapitres[str_starts(chapitres, "#", negate = TRUE)]
## Récupérer le contenu de chaque chapitre
for (chap in chapitres) {
page <- read_html(chap, encoding = "UTF-8")
contenu <- as.character(xml_find_first(page, ".//article"))
rac <- str_sub(chap, 1, -6)
contenu <- str_replace_all(contenu, 'id="TOC', 'class="TOC')
contenu <- str_replace_all(contenu, 'id="', paste0('id="', rac, "_"))
contenu <- str_replace_all(contenu, 'href="#', paste0('href="#', rac, "_"))
contenu <- str_replace_all(contenu, '<article>', paste0('<article id="', rac, '">'))
res <- paste(res, contenu, sep="\n")
}
## Récupérer le contenu de chaque chapitre
for (chap in chapitres) {
page <- read_html(chap, encoding = "UTF-8")
contenu <- as.character(xml_find_first(page, ".//article"))
rac <- str_sub(chap, 1, -6)
contenu <- str_replace_all(contenu, 'id="TOC', 'class="TOC')
contenu <- str_replace_all(contenu, 'id="', paste0('id="', rac, "_"))
contenu <- str_replace_all(contenu, 'href="#', paste0('href="#', rac, "_"))
contenu <- str_replace_all(contenu, '<article>', paste0('<article id="', rac, '">'))
res <- paste(res, contenu, sep="\n")
}
# Quelques ajustements
res <- str_replace_all(res, '&#13;', '')
for (chap in chapitres) {
rac <- str_sub(chap, 1, -6)
res <- str_replace_all(res, paste0('href="', chap, '#'), paste0('href="#', rac, '_'))
res <- str_replace_all(res, paste0('href="', chap, '"'), paste0('href="#', rac, '"'))
}
## Export final
before <- paste(readLines("include/pdf_before.html", encoding = "UTF-8"), collapse = "\n")
after <- paste(readLines("include/pdf_after.html", encoding = "UTF-8"), collapse = "\n")
res <- paste(before, res, after, sep="\n")
res <- str_replace_all(res, "\r", "")
cat(res, file = file("analyse-R.html", encoding = "UTF-8"), sep="\n")
## Génération du PDF
system('prince analyse-R.html --javascript')
# Suppression des fichiers HTML
#unlink("graphs/", recursive = TRUE)
for (f in  list.files(pattern = "html$"))
unlink(f)
# Vérification des dépendances
source("verification_installation_dependances.R")
# Recréer tous les chapitres
chapitres <- list.files(pattern = "Rmd$")
for (f in chapitres) {
set.seed(100);
rmarkdown::render(f, envir = new.env())
}
# Générer le PDF
source("make_pdf.R")
# Suppression des fichiers HTML
#unlink("graphs/", recursive = TRUE)
for (f in  list.files(pattern = "html$"))
unlink(f)
# Vérification des dépendances
source("verification_installation_dependances.R")
# Recréer tous les chapitres
chapitres <- list.files(pattern = "Rmd$")
for (f in chapitres) {
set.seed(100);
rmarkdown::render(f, envir = new.env())
}
# Générer le PDF
source("make_pdf.R")
# Suppression des fichiers HTML
#unlink("graphs/", recursive = TRUE)
for (f in  list.files(pattern = "html$"))
unlink(f)
# Vérification des dépendances
source("verification_installation_dependances.R")
# Recréer tous les chapitres
chapitres <- list.files(pattern = "Rmd$")
for (f in chapitres) {
set.seed(100);
rmarkdown::render(f, envir = new.env())
}
# Générer le PDF
source("make_pdf.R")
# Suppression des fichiers HTML
#unlink("graphs/", recursive = TRUE)
for (f in  list.files(pattern = "html$"))
unlink(f)
# Vérification des dépendances
source("verification_installation_dependances.R")
# Recréer tous les chapitres
chapitres <- list.files(pattern = "Rmd$")
for (f in chapitres) {
set.seed(100);
rmarkdown::render(f, envir = new.env())
}
# Générer le PDF
source("make_pdf.R")
# Suppression des fichiers HTML
#unlink("graphs/", recursive = TRUE)
for (f in  list.files(pattern = "html$"))
unlink(f)
# Vérification des dépendances
source("verification_installation_dependances.R")
# Recréer tous les chapitres
chapitres <- list.files(pattern = "Rmd$")
for (f in chapitres) {
set.seed(100);
rmarkdown::render(f, envir = new.env())
}
# Générer le PDF
source("make_pdf.R")
# Suppression des fichiers HTML
#unlink("graphs/", recursive = TRUE)
for (f in  list.files(pattern = "html$"))
unlink(f)
# Vérification des dépendances
source("verification_installation_dependances.R")
# Recréer tous les chapitres
chapitres <- list.files(pattern = "Rmd$")
for (f in chapitres) {
set.seed(100);
rmarkdown::render(f, envir = new.env())
}
# Générer le PDF
source("make_pdf.R")
# Suppression des fichiers HTML
#unlink("graphs/", recursive = TRUE)
for (f in  list.files(pattern = "html$"))
unlink(f)
# Vérification des dépendances
source("verification_installation_dependances.R")
# Recréer tous les chapitres
chapitres <- list.files(pattern = "Rmd$")
for (f in chapitres) {
set.seed(100);
rmarkdown::render(f, envir = new.env())
}
# Générer le PDF
source("make_pdf.R")
require(xml2)
require(stringr)
## Page d'accueil
index <- read_html("index.html", encoding = "UTF-8")
res <- as.character(xml_find_first(index, ".//article"))
## Identifier les chapitres
divs <- xml_find_all(index, ".//div")
for (div in divs)
if (!is.na(xml_attr(div, 'id')))
if (xml_attr(div, 'id') == 'tdm')
tdm <- div
chapitres <- unique(xml_attr(xml_find_all(tdm, ".//a"), 'href'))
chapitres <- chapitres[str_starts(chapitres, "#", negate = TRUE)]
## Récupérer le contenu de chaque chapitre
for (chap in chapitres) {
page <- read_html(chap, encoding = "UTF-8")
contenu <- as.character(xml_find_first(page, ".//article"))
rac <- str_sub(chap, 1, -6)
contenu <- str_replace_all(contenu, 'id="TOC', 'class="TOC')
contenu <- str_replace_all(contenu, 'id="', paste0('id="', rac, "_"))
contenu <- str_replace_all(contenu, 'href="#', paste0('href="#', rac, "_"))
contenu <- str_replace_all(contenu, '<article>', paste0('<article id="', rac, '">'))
res <- paste(res, contenu, sep="\n")
}
# Quelques ajustements
res <- str_replace_all(res, '&#13;', '')
for (chap in chapitres) {
rac <- str_sub(chap, 1, -6)
res <- str_replace_all(res, paste0('href="', chap, '#'), paste0('href="#', rac, '_'))
res <- str_replace_all(res, paste0('href="', chap, '"'), paste0('href="#', rac, '"'))
}
## Export final
before <- paste(readLines("include/pdf_before.html", encoding = "UTF-8"), collapse = "\n")
after <- paste(readLines("include/pdf_after.html", encoding = "UTF-8"), collapse = "\n")
res <- paste(before, res, after, sep="\n")
res <- str_replace_all(res, "\r", "")
cat(res, file = file("analyse-R.html", encoding = "UTF-8"), sep="\n")
## Génération du PDF
system('prince analyse-R.html --javascript')
`0.BASE.TRAVAUX.PRATIQUES.ANOVA.ISE2.2024.2025` <- read.csv("C:/Users/HP/Desktop/temp/Projet/anova/remake_analyseR/data/0.BASE TRAVAUX PRATIQUES ANOVA ISE2 2024-2025.csv", header=FALSE, sep=";")
View(`0.BASE.TRAVAUX.PRATIQUES.ANOVA.ISE2.2024.2025`)
library(readxl)
X0_BASE_TRAVAUX_PRATIQUES_ANOVA_ISE2_2024_2025 <- read_excel("data/0.BASE TRAVAUX PRATIQUES ANOVA ISE2 2024-2025.csv")
library(readr)
X0_BASE_TRAVAUX_PRATIQUES_ANOVA_ISE2_2024_2025 <- read_delim("data/0.BASE TRAVAUX PRATIQUES ANOVA ISE2 2024-2025.csv",
delim = ";", escape_double = FALSE, na = "NA",
trim_ws = TRUE)
View(X0_BASE_TRAVAUX_PRATIQUES_ANOVA_ISE2_2024_2025)
library(readr)
X0_BASE_TRAVAUX_PRATIQUES_ANOVA_ISE2_2024_2025 <- read_delim("data/0.BASE TRAVAUX PRATIQUES ANOVA ISE2 2024-2025.csv",
delim = ";", escape_double = FALSE, na = "NA",
trim_ws = TRUE)
View(X0_BASE_TRAVAUX_PRATIQUES_ANOVA_ISE2_2024_2025)
library(readr)
X0_BASE_TRAVAUX_PRATIQUES_ANOVA_ISE2_2024_2025 <- read_delim("data/0.BASE TRAVAUX PRATIQUES ANOVA ISE2 2024-2025.csv",
delim = ";", escape_double = FALSE, na = "NA",
trim_ws = TRUE)
individu_2 <- data[2, ]
library(readr)
data <- read_delim("data/0.BASE TRAVAUX PRATIQUES ANOVA ISE2 2024-2025.csv",
delim = ";", escape_double = FALSE, na = "NA",
trim_ws = TRUE)
individu_2 <- data[2, ]
tableau_individu_2 <- tbl_summary(individu_2)
library(readr)
library(gtsummary)
individu_2 <- data[2, ]
tableau_individu_2 <- tbl_summary(individu_2)
tableau_individu_2
View(`0.BASE.TRAVAUX.PRATIQUES.ANOVA.ISE2.2024.2025`)
View(`0.BASE.TRAVAUX.PRATIQUES.ANOVA.ISE2.2024.2025`)
View(`0.BASE.TRAVAUX.PRATIQUES.ANOVA.ISE2.2024.2025`)
data <- read_delim("data/0.BASE TRAVAUX PRATIQUES ANOVA ISE2 2024-2025.csv",
delim = ";", escape_double = FALSE, na = "NA",
trim_ws = TRUE)
individu_2 <- data[2, ]
individu_2_df <- as.data.frame(t(individu_2))
knitr::kable(individu_2, caption = "Valeurs de l'individu numéro 2 par variable")
data <- read_delim("data/0.BASE TRAVAUX PRATIQUES ANOVA ISE2 2024-2025.csv",
delim = ";",
trim_ws = TRUE)
View(`0.BASE.TRAVAUX.PRATIQUES.ANOVA.ISE2.2024.2025`)
data <- read_delim("data/0.BASE TRAVAUX PRATIQUES ANOVA ISE2 2024-2025.csv",
delim = ";",
trim_ws = TRUE)
quant_vars <- sapply(data, is.numeric)
quantitative_stats <- data.frame(
Variable = names(data)[quant_vars],
Valeurs_manquantes = colSums(is.na(data[, quant_vars])),
Minimum = sapply(data[, quant_vars], min, na.rm = TRUE),
Maximum = sapply(data[, quant_vars], max, na.rm = TRUE),
Moyenne = sapply(data[, quant_vars], mean, na.rm = TRUE),
Variance = sapply(data[, quant_vars], var, na.rm = TRUE)
)
knitr::kable(quantitative_stats, caption = "Statistiques des Variables Quantitatives")
qual_vars <- sapply(data, is.factor) | sapply(data, is.character)
qualitative_table <- data.frame(
Variable = names(data)[qual_vars],
Facteurs = sapply(data[, qual_vars], function(x) paste(unique(x), collapse = ", ")),
Valeurs_manquantes = colSums(is.na(data[, qual_vars]))
)
knitr::kable(qualitative_table, caption = "Variables Qualitatives, Facteurs et Nombre de Valeurs Manquantes")
require(xml2)
require(stringr)
## Page d'accueil
index <- read_html("index.html", encoding = "UTF-8")
res <- as.character(xml_find_first(index, ".//article"))
## Identifier les chapitres
divs <- xml_find_all(index, ".//div")
for (div in divs)
if (!is.na(xml_attr(div, 'id')))
if (xml_attr(div, 'id') == 'tdm')
tdm <- div
chapitres <- unique(xml_attr(xml_find_all(tdm, ".//a"), 'href'))
chapitres <- chapitres[str_starts(chapitres, "#", negate = TRUE)]
## Récupérer le contenu de chaque chapitre
for (chap in chapitres) {
page <- read_html(chap, encoding = "UTF-8")
contenu <- as.character(xml_find_first(page, ".//article"))
rac <- str_sub(chap, 1, -6)
contenu <- str_replace_all(contenu, 'id="TOC', 'class="TOC')
contenu <- str_replace_all(contenu, 'id="', paste0('id="', rac, "_"))
contenu <- str_replace_all(contenu, 'href="#', paste0('href="#', rac, "_"))
contenu <- str_replace_all(contenu, '<article>', paste0('<article id="', rac, '">'))
res <- paste(res, contenu, sep="\n")
}
# Quelques ajustements
res <- str_replace_all(res, '&#13;', '')
for (chap in chapitres) {
rac <- str_sub(chap, 1, -6)
res <- str_replace_all(res, paste0('href="', chap, '#'), paste0('href="#', rac, '_'))
res <- str_replace_all(res, paste0('href="', chap, '"'), paste0('href="#', rac, '"'))
}
## Export final
before <- paste(readLines("include/pdf_before.html", encoding = "UTF-8"), collapse = "\n")
after <- paste(readLines("include/pdf_after.html", encoding = "UTF-8"), collapse = "\n")
res <- paste(before, res, after, sep="\n")
res <- str_replace_all(res, "\r", "")
cat(res, file = file("analyse-R.html", encoding = "UTF-8"), sep="\n")
## Génération du PDF
system('prince analyse-R.html --javascript')
